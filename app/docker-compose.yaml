services:
  # PRESENTATION TIER - nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: restaurant_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_files:/usr/share/nginx/html/static:ro  
    depends_on:
      app:
        condition: service_healthy
    networks:
      - frontend_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 60s

  # APPLICATION TIER - Flask
  app:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      args:
        - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    container_name: restaurant_app
    restart: unless-stopped
    expose:
      - "5000"
    volumes:
      - static_files:/app/static  
    env_file:
      - .env
    environment:
      - MONGODB_URI
      - SECRET_KEY
      - FLASK_ENV
      - REACT_APP_GOOGLE_MAPS_API_KEY
    depends_on:
      - db
    networks:
      - frontend_network
      - backend_network
    healthcheck:
      test: ["CMD", "python", "-c", "print('healthy')"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 60s

  # DATA TIER - MongoDB
  db:
    image: mongo:7.0.22-jammy
    container_name: restaurant_db
    restart: unless-stopped
    expose:
      - "27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD
      - MONGO_INITDB_DATABASE
    networks:
      - backend_network

volumes:
  mongodb_data:
  static_files:

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge